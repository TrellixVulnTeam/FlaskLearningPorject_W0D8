### In Terminal
# To generate automaticaly data base table from the class 
# use Python Interactive Mode -> library «ipython»
# Import «db» object from the application «app» and run the «db.create_all()» method to generate db file

'''
    (env) PS C:/Users/Administrador/Desktop/CODE/PyFlask/ConferenceBarrel> ipython

    Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)]
    Type 'copyright', 'credits' or 'license' for more information
    IPython 7.10.2 -- An enhanced Interactive Python. Type '?' for help.

    In [1]: from main import db

    In [2]: db.create_all()

'''



# Than create serveral instances of «Conferences» module class

'''
## Import class «Conference» and «datetime» to create values in data base:

    In [3]: from main import Conference

    In [4]: from datetime import datetime

## create vars hat contain info to pass into data base:

    In [5]: conf1 = Conference(title='Python Conference', date=datetime(2019, 10, 10), ticket_cost=200.0)

    In [6]: conf2 = Conference(title='Flask Conference', date=datetime(2019, 10, 11), ticket_cost=150.0)

    In [7]: conf3 = Conference(title='Django Conference', date=datetime(2019, 10, 12), ticket_cost=300.0)

## Add vars into data base session:
    In [8]: db.session.add(conf1)

    In [9]: db.session.add(conf2)

    In [10]: db.session.add(conf3)

## To submit the changes to data base
    In [11]: db.session.commit() 

'''



# To view data base in terminal = equals to = «SELECT * FROM conference»

'''
In [12]: Conference.query.all()
Out[12]: 
[Conference Python Conference,
 Conference Flask Conference,
 Conference Django Conference]

'''


##########################################################################
CREATE USER DATA BASE (with usename and password)
--------------------------------------------------------------------------

        # Import user class 
In [1]: from main import ConferenceBarrelUser

        # Import db function
In [2]: from main import db

        # Create data base with name «ConferenceBarrelUser»
In [3]: db.create_all()

        # Define var to create 'username' and 'password' from user class: ConferenceBarrelUser('username', 'password')
In [4]: rdoe =  ConferenceBarrelUser('rdoe', 'secret_data')

        # Add var into data base session 
In [6]: db.session.add(rdoe)

        # Commit data base session to write data into user data base with name «ConferenceBarrelUser»
In [7]: db.session.commit()

        # Query all data written into «ConferenceBarrelUser» data base
In [8]: ConferenceBarrelUser.query.all()
        # Result of querying
Out[8]: [<ConferenceBarrelUser 1>]

        # Define var to extract data written into «ConferenceBarrelUser» data base
In [9]: user = ConferenceBarrelUser.query.get(1)

        # Print «username» field of from var «user» which contains 1st filed of «ConferenceBarrelUser» data base
In [10]: user.username
        # Result of printing the var «user»
Out[10]: 'rdoe'



